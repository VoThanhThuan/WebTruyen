@page "/chapter"
@using WebTruyen.UI.Admin.Service.ImageService
@using WebTruyen.UI.Admin.Service.PageService
@using WebTruyen.UI.Admin.Service.ChapterService
@using Microsoft.AspNetCore.WebUtilities
@using WebTruyen.Library.Entities.ViewModel
@using System.Threading
@using System.Timers

<div>
    @if (_element.Apiresult is >= 200 and <= 299)
    {
        <div class="alert alert-success d-flex align-items-center alert-dismissible" role="alert">
            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg>
            <div>
                Cập nhật thành công.
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    else if (_element.Apiresult != 0)
    {
        <div class="alert alert-danger d-flex align-items-center alert-dismissible" role="alert">
            <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Danger:"><use xlink:href="#exclamation-triangle-fill" /></svg>
            <div>
                Cập nhật thất bại. (@_element.Apiresult)
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="container overflow-auto mt-2">
        <div class="content rounded-3 p-1">
            <div class="row">
                <div class="col-md-12">
                    <h1>Chapter</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="page">

                        <h3 class="title">
                            <a href="">Return Comic</a>
                        </h3>

                        <div class="row">
                            <EditForm Model="@_chapterVm" OnSubmit="@Upload">
                                <div class="row g-2">
                                    <div class="form-floating mb-3">
                                        <InputNumber @bind-Value="_chapterVm.Ordinal" type="number" class="form-control" id="floatingInput" placeholder="0" />
                                        <label for="floatingInput">Số Chap</label>
                                    </div>
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="_chapterVm.Name" type="text" class="form-control" id="floatingInput" placeholder="Tên Chap" />
                                        <label for="floatingInput">Tên Chap</label>
                                    </div>

                                </div>
                                <div class="row g-2">
                                    <div class="mb-3">
                                        @if (string.IsNullOrEmpty(idChaper))
                                        {
                                            <label for="formFileMultiple" class="form-label">Upload Trang Truyện</label>
                                        }
                                        else
                                        {
                                            <label for="formFileMultiple" class="form-label">Upload Lại Các Trang Truyện</label>
                                        }
                                        <InputFile class="form-control" type="file" id="formFileMultiple" multiple OnChange="InputImage" />
                                    </div>
                                </div>
                                <div class="d-flex align-items-center mb-3">
                                    @if (!_element.IsLoadImage)
                                    {
                                        <button class="btn btn-primary" type="submit">Submit</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" type="submit" disabled>
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            Loading...
                                        </button>
                                    }

                                    <div class="form-check form-switch d-inline-flex">
                                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                                        <label class="form-check-label" for="flexSwitchCheckDefault">Bật nếu muốn khóa chap này lại</label>
                                    </div>
                                </div>
                            </EditForm>
                        </div>

                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-center">
                @if (!_Pages.Any())
                {
                    <div class="d-block @_element.visibility">Không có hình ảnh!</div>
                }
                else
                {
                    <div class="d-block @_element.visibility">Loading....</div>
                    <div class="d-flex flex-wrap">
                        @{
                            var index = 0;
                            foreach (var page in _Pages)
                            {
                                <div class="card">
                                    <img src="@(page.Image)" class="img-thumbnail preview-image lazy-loading" loading="lazy" />
                                    <span class="badge bg-secondary">@(++index)</span>
                                </div>
                            }
                        }

                    </div>
                }
            </div>

        </div>

    </div>
</div>

@code {

    [Parameter]
    public Guid idComic { get; set; } = Guid.Empty;

    [Parameter]
    public string idChaper { get; set; } = null;

    [Inject] IChapterService _ChapterApi { get; set; }
    [Inject] IPageService _PageApi { get; set; }
    [Inject] IImageService _image { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }

    ChapterVM _chapterVm = new ChapterVM();
    ViewElement _element = new ViewElement();
    List<PageVM> _Pages { get; set; } = new List<PageVM>();

    List<(byte[] image, string nameFile)> _imageValues = new List<(byte[] image, string nameFile)>();

    //Xem là đang trong tiến trình tạo mới hay cập nhật
    private bool _isUpdate = true;


    protected override async Task OnInitializedAsync()
    {
        _chapterVm.IdComic = Guid.Empty;

        await NavigateToComponent();

        await LoadPages();

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    async Task LoadPages()
    {
        if (!string.IsNullOrEmpty(idChaper))
        {
            var result = _PageApi.GetPagesInChapterYeild(Guid.Parse(idChaper));
            await foreach (var page in result)
            {
                _Pages.Add(page);
                StateHasChanged();
            }
            _element.visibility = "invisible";
        }
    }

    async void Upload()
    {
        _element.Apiresult = 0;
        if (!_isUpdate)
        {
            _element.Apiresult = await _ChapterApi.PostChapter(_chapterVm, _imageValues);
            StateHasChanged();
            await Task.Delay(300);
            _navigationManager.NavigateTo(@"comic/detail?id={idComic}");
        }
        else
        {
            _element.Apiresult = await _ChapterApi.PutChapter(Guid.Parse(idChaper), _chapterVm, _imageValues);
            StateHasChanged();
        }
    }

    async void InputImage(InputFileChangeEventArgs e)
    {
        if (e == null) return;
        if (e.FileCount > 100) return;

        _Pages = new List<PageVM>();

        var imageDataUrl = _image.ImagesToString(e.GetMultipleFiles(100));

        _element.visibility = "visible";
        _element.IsLoadImage = true;
        StateHasChanged();

        _imageValues = new List<(byte[] image, string nameFile)>();
        await foreach (var image in imageDataUrl)
        {
            if (!string.IsNullOrEmpty(image.stringValue))
            {
                _Pages.Add(new PageVM() { Image = image.stringValue });
                //Cập nhât UI
                StateHasChanged();
                _imageValues.Add(image.image);
            }

        }
        _element.IsLoadImage = false;
        _element.visibility = "invisible";
        StateHasChanged();
    }

    async Task NavigateToComponent()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        // Phân tích query
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("comic", out var comic))
        {
            _chapterVm.IdComic = Guid.Parse((ReadOnlySpan<char>)comic.First());
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("idChaper", out var chapter))
        {
            idChaper = chapter.First();
            _chapterVm = await _ChapterApi.GetChapter(Guid.Parse(idChaper));
        }

        //chuyển trang nếu query comic rỗng
        if (_chapterVm.IdComic == Guid.Empty)
        {
            _navigationManager.NavigateTo("comic");
            return;
        }
        //nếu idChapter rỗng nghĩa là đang tạo chapter mới // tự động đánh số thứ tự chap
        if (string.IsNullOrEmpty(idChaper))
        {
            var result = await _ChapterApi.GetLastChapter(_chapterVm.IdComic);
            _chapterVm.Ordinal = result?.Ordinal + 1 ?? 0;
            _isUpdate = false;
            StateHasChanged();
        }
    }

    class ViewElement
    {
        public string visibility { get; set; } = "visible";
        public int Apiresult { get; set; } = 0;
        public bool IsLoadImage { get; set; } = false;
    }
}
