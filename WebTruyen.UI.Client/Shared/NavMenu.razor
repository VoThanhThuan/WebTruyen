@using Blazored.SessionStorage
@using WebTruyen.Library.Entities.Request
@using WebTruyen.Library.Entities.ViewModel
@using WebTruyen.UI.Client.Service.UserService
@using Blazored.LocalStorage
@using System.Threading
@if (_element.OnDark)
{
    <link rel="stylesheet" href="./resources/css/dark.css">
}
else
{
    <link rel="stylesheet" href="./resources/css/light.css">
}


<nav id="navbar" class="navbar navbar-light navbar-expand-sm bg-content border-bottom rounded-5">
    <div class="container-fluid">
        <div class="mb-2 mb-md-0">
            <a class="navbar-brand" href="#">Navbar</a>
        </div>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <form class="search-bar d-flex justify-content-center mb-2 mt-2 mb-md-0 mt-md-0">
                <div class="search-bar mb-2 mb-md-0">
                    <div class="search-content">
                        <div class="search-icon">
                            <div class="icon">
                                <span><svg focusable="false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></svg></span>
                            </div>
                        </div>
                        <input type="text" class="border-0" placeholder="Search">
                        <div class="search-icon">

                            <div class="icon" @onclick="OpenGenreMenu">
                                <span>
                                    @if (_element.pop_grene)
                                    {
                                        <svg viewBox="0 0 24 24" preserveAspectRatio="xMidYMid meet" focusable="false" class="style-scope yt-icon" style="pointer-events: none; display: block; width: 100%; height: 100%;"><g class="style-scope yt-icon"><path d="M16,4v4h4V4H16z M16,10v4h4v-4H16z M10,4v4h4V4H10z M10,10v4h4v-4H10z M16,16v4h4v-4H16z M10,16v4h4v-4H10z M4,4v4h4V4H4z M4,10v4h4v-4H4z M4,16v4h4v-4H4z" class="style-scope yt-icon"></path></g></svg>

                                    }
                                    else
                                    {
                                        <svg viewBox="0 0 24 24" preserveAspectRatio="xMidYMid meet" focusable="false" class="style-scope yt-icon" style="pointer-events: none; display: block; width: 100%; height: 100%;"><g class="style-scope yt-icon"><path d="M16,4v4h4V4H16z M19,7h-2V5h2V7z M16,10v4h4v-4H16z M19,13h-2v-2h2V13z M10,4v4h4V4H10z M13,7h-2V5h2V7z M10,10v4h4v-4H10z M13,13h-2v-2h2V13z M16,16v4h4v-4H16z M19,19h-2v-2h2V19z M10,16v4h4v-4H10z M13,19h-2v-2h2V19z M4,4v4h4V4H4z M7,7H5V5h2V7z M4,10 v4h4v-4H4z M7,13H5v-2h2V13z M4,16v4h4v-4H4z M7,19H5v-2h2V19z" class="style-scope yt-icon"></path></g></svg>

                                    }
                                </span>
                            </div>
                        </div>

                    </div>
                </div>

            </form>
            <div class="d-flex justify-content-end">
                @if (_element.IsSignIn)
                {
                    <img class="avatar-sm rounded-circle cursor-pointer" src="@_element.User.Avatar" alt="avatar" @onclick="OpenUserMenu">
                }
                else
                {
                    <button class="btn btn-primary" style="white-space: nowrap;" @onclick="OpenUserMenu">Đăng Nhập</button>
                }
            </div>
        </div>

    </div>
</nav>

@if (_element.pop_user)
{
    <div class="pop-menu pop-menu-right">
        <div class="d-flex">
            <div class="card rounded-5 bg-content" name="info">
                <div class="p-2">
                    <div class="rounded-5 p-2 border-bottom">
                        <a class="navbar-brand" href="#">Thông Tin</a>
                    </div>
                    @if (_element.IsSignIn)
                    {
                        <div class="mt-2">
                            <div class="row card-info m-1 mb-3 p-2">
                                <div class="col-auto m-auto p-0">
                                    <img class="avatar-md rounded-circle" src="@_element.User.Avatar" alt="avatar">
                                </div>
                                <div class="col d-flex align-items-center">
                                    <div class="fs-2">@_element.User.Nickname</div>
                                </div>
                            </div>
                            <div class="content mt-1 m-1">
                                <div class="card-info p-2 mt-2">
                                    <div class="form-check form-switch">
                                        Dảk Mode<input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @onclick="OnDarkMode">
                                    </div>
                                </div>
                                <div class="card-info p-2 mt-2">
                                    Truyện đang theo dõi
                                </div>
                                <div class="card-info p-2 mt-2">
                                    Cài đặt tài khoản
                                </div>
                                <a href="#" class="text">
                                    <div class="card-info p-2 mt-2" @onclick="SignOut">
                                        Đăng Xuất
                                    </div>
                                </a>
                            </div>

                        </div>

                    }
                    else
                    {
                        <div class="mt-2">
                            <div class="content mt-1 m-1">
                                <div class="card-info p-2 mt-2">
                                    <div class="form-check form-switch">
                                        Dảk Mode<input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @onclick="OnDarkMode">
                                    </div>
                                </div>
                                <EditForm Model="LoginRequest" OnValidSubmit="SignIn">
                                    <div class="card-info p-2 mt-2">
                                        <div class="form-floating">
                                            <InputText @bind-Value="LoginRequest.Username" class="form-control" id="floatingInput" placeholder="Username"></InputText>
                                            <label for="floatingInput">Username</label>
                                        </div>
                                    </div>
                                    <div class="card-info p-2 mt-2">
                                        <div class="form-floating">
                                            <InputText @bind-Value="LoginRequest.Password" class="form-control" id="floatingPassword" placeholder="Password"></InputText>
                                            <label for="floatingPassword">Password</label>
                                        </div>
                                    </div>

                                    <div class="card-info p-2 mt-2">
                                        <input type="submit" class="btn btn-primary me-5" value="Đăng Nhập" />
                                        <button class="btn btn-outline-primary">Đăng Ký</button>
                                    </div>
                                </EditForm>

                            </div>

                        </div>

                    }

                </div>
            </div>
        </div>
    </div>

}


@if (_element.pop_grene)
{
    <div class="pop-menu pop-menu-center">
        <div class="d-flex">
            <div class="card rounded-5 bg-content" name="info">
                <div class="p-2">
                    <div class="rounded-5 p-2 border-bottom">
                        <a class="navbar-brand" href="#">Thông Tin</a>
                    </div>

                    <div class="d-flex flex-wrap justify-content-evenly">
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                        <div class="btn btn-outline-primary rounded-pill m-1" @onclick="OpenGenreMenu">Thể Loại</div>
                    </div>

                </div>
            </div>
        </div>

    </div>

}
@if (_element.pop_background_click)
{
    <div class="background-click" @onclick="ClosePopMenu"></div>
}

@code{

    #region initialization


    public Element _element { get; set; } = new();

    public LoginRequest LoginRequest { get; set; } = new();

    [Inject] IUserService _userApi { get; set; }
    [Inject] ISessionStorageService _sessionStorage { get; set; }
    [Inject] ILocalStorageService _localStorage { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await _localStorage.GetItemAsStringAsync("Token");
            if (!string.IsNullOrEmpty(token))
            {
                await GetUserByToken(token);
                StateHasChanged();
            }
        }
    }

    #endregion



    #region Xử lý giao diện
    void OnDarkMode()
    {
        _element.OnDark = !_element.OnDark;
        StateHasChanged();
    }

    void OpenGenreMenu()
    {
        _element.pop_grene = !_element.pop_grene;
        BackgroundClick();
        StateHasChanged();
    }
    void OpenUserMenu()
    {
        _element.pop_user = !_element.pop_user;
        BackgroundClick();
        StateHasChanged();
    }

    void BackgroundClick()
    {
        if (!_element.pop_grene && !_element.pop_user)
        {
            _element.pop_background_click = false;
        }
        else
        {
            _element.pop_background_click = true;
        }
    }

    void ClosePopMenu()
    {
        _element.pop_background_click = false;
        _element.pop_grene = false;
        _element.pop_user = false;
    }

    #endregion

    #region Xử lý dữ liệu

    void SignOut()
    {
        _sessionStorage.ClearAsync();
        _localStorage.ClearAsync();
        _element.IsSignIn = false;
        _element.User = new UserVM();
        StateHasChanged();
    }

    #endregion

    #region Giao tiếp server

    async Task SignIn(EditContext editContext)
    {
        var token = await _userApi.Authenticate(LoginRequest);
        if (string.IsNullOrEmpty(token))
        {
            Console.WriteLine($">>> [❌] Đăng thập thất bại ");
        }
        else
        {
            Console.WriteLine($">>> [⭕] Đăng Nhập Thành Công");

            await _localStorage.SetItemAsStringAsync("Token", token);
            await _sessionStorage.SetItemAsStringAsync("Token", token);

            await GetUserByToken(token);

            StateHasChanged();
        }
    }

    async Task GetUserByToken(string token)
    {
        var user = await _userApi.GetUserByAccessTokenAsync(token);
        if (user is not null)
        {
            _element.IsSignIn = true;
            _element.User = user;
            await _sessionStorage.SetItemAsStringAsync("Token", token);
        }
        else
        {
            await _localStorage.RemoveItemAsync("Token");
        }
    }

    #endregion



    public class Element
    {
        public bool OnDark { get; set; } = false;

        public bool IsSignIn { get; set; } = false;

        public bool pop_grene { get; set; } = false;
        public bool pop_user { get; set; } = false;
        public bool pop_background_click { get; set; } = false;

        public UserVM User { get; set; } = new UserVM();

    }

}