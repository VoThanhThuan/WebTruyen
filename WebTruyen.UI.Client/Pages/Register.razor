@layout LoginLayout

@page "/register"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@using WebTruyen.UI.Client.Model
@using WebTruyen.UI.Client.Service.ImageService
@using WebTruyen.UI.Client.Service.UserService

<link rel="stylesheet" href="./vendors/Cropprjs/croppr.min.css">

<div class="row justify-content-center">
    <div class="col-lg-6 col-md-8">
        <div class="card bg-secondary shadow border-0">
            <div class="card-header bg-transparent pb-4 px-lg-5">
                <div class="text-muted text-center mt-2 mb-3"><small>Đăng nhập với</small></div>
                <div class="row">
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/images/brand/facebook.svg" alt="facebook" width="20" height="20"></span>
                            <span class="btn-inner--text">Facebook</span>
                        </a>
                    </div>
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/assets/argon/img/icons/common/google.svg" alt="google" width="20" height="20"></span>
                            <span class="btn-inner--text">Google</span>
                        </a>
                    </div>
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/images/brand/twitter.svg" alt="twitter" width="20" height="20"></span>
                            <span class="btn-inner--text">Twitter</span>
                        </a>
                    </div>
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/assets/argon/img/icons/common/github.svg" alt="github" width="20" height="20"></span>
                            <span class="btn-inner--text">Github</span>
                        </a>
                    </div>
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/images/brand/linkedin.svg" alt="linkedin" width="20" height="20"></span>
                            <span class="btn-inner--text">Linkedin</span>
                        </a>
                    </div>
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/images/brand/gitlab.svg" alt="gitlab" width="20" height="20"></span>
                            <span class="btn-inner--text">Gitlab</span>
                        </a>
                    </div>
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/images/brand/bitbucket.svg" alt="bitbucket" width="20" height="20"></span>
                            <span class="btn-inner--text">Bitbucket</span>
                        </a>
                    </div>
                    <div class="col-12 col-sm-6">
                        <a href="#" class="btn btn-neutral btn-icon btn-block mb-3" id="btn-ph">
                            <span class="btn-inner--icon"><img src="https://j2team.dev/images/brand/ph.ico" alt="ph" width="16" height="16" class="w-auto"></span>
                            <span class="btn-inner--text">P<span hidden="">a</span>or<span hidden="">b</span>nh<span hidden="">c</span>ub</span>
                        </a>
                    </div>
                </div>
            </div>

            <div class="card-body px-lg-5 py-lg-5">
                <div class="d-flex flex-column align-items-center">
                    @if (_element.Apiresult > 100 && _element.Apiresult < 300)
                    {
                        <span class="text-primary">Tạo mới tài khoản thành công</span>
                    }
                    <div class="text-center text-muted mb-4">
                        <small>Hoặc đăng ký với thông tin của bạn</small>
                    </div>
                    <img id="source" class="avatar-img" src="@_element.Avatar" alt="logo" width="80" height="80">
                </div>
                <EditForm Model="_userRequest" OnValidSubmit="Update">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputFile class="form-control" type="file" id="input-file" OnChange="InputImage" accept="image/png, image/gif, image/jpeg" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="text" class="form-control" id="floatingNickName" placeholder="Họ và Tên" @bind-Value="_userRequest.Nickname" />
                            <ValidationMessage For="() => _userRequest.Nickname" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="text" class="form-control" placeholder="Tài khoản" @bind-Value="_userRequest.Username" />
                            <ValidationMessage For="() => _userRequest.Username" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="password" class="form-control" placeholder="Mật khẩu" @bind-Value="_userRequest.Password" />
                            <ValidationMessage For="() => _userRequest.Password" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="password" class="form-control" placeholder="Nhập lại mật khẩu" @bind-Value="_userRequest.ConfirmPassword" />
                            <ValidationMessage For="() => _userRequest.ConfirmPassword" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputDate class="form-control" placeholder="Ngày sinh" @bind-Value="_userRequest.Dob" />
                            <ValidationMessage For="() => _userRequest.Dob" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="text" class="form-control" placeholder="Số điện thoại" @bind-Value="_userRequest.PhoneNumber" />
                            <ValidationMessage For="() => _userRequest.PhoneNumber" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="text" class="form-control" placeholder="Số điện thoại" @bind-Value="_userRequest.Email" />
                            <ValidationMessage For="() => _userRequest.Email" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="text" class="form-control" placeholder="Địa chỉ" @bind-Value="_userRequest.Address" />
                            <ValidationMessage For="() => _userRequest.Address" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="input-group input-group-alternative mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="ni ni-hat-3"></i></span>
                            </div>
                            <InputText type="text" class="form-control" placeholder="Trang web hoặc fanpage" @bind-Value="_userRequest.Fanpage" />
                            <ValidationMessage For="() => _userRequest.Fanpage" />
                        </div>
                    </div>

                    <div class="form-floating mb-3">
                        <select class="form-select" id="floatingSelect" aria-label="Floating label select example" @onchange="(e) => { var v = e.Value.ToString();_userRequest.sex = string.IsNullOrEmpty(v) || bool.Parse(v); }">
                            <option value="True">Nam</option>
                            <option value="False">Nữ</option>
                        </select>
                        <label for="floatingSelect">Giới Tính</label>
                        <ValidationMessage For="() => _userRequest.sex" />
                    </div>

                    @if (_element.IsSubmit) {
                        <input type="submit" class="btn btn-primary mt-2" value="Save" />
                    } else {
                        <button class="btn btn-primary mt-2" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </button>
                    }
                </EditForm>

            </div>
        </div>
    </div>
</div>

<button id="open-crop-image" data-bs-toggle="modal" data-bs-target="#POPcrop" hidden></button>
@if (_element.CropOn) {
    <!-- Modal Crop hình -->
    <div class="modal fade" id="POPcrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Crop Hình</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img id="img-crop" src="@_element.AvatarCrop" alt="" class="img-thumbnail rounded" hidden>
                    <img id="cropper" src="@_element.AvatarCrop" alt="" class="img-thumbnail rounded" style="max-width: 500px;">
                </div>
                <div class="modal-footer">
                    <button id="close-ask-modal" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" @onclick="CropImage">Xác Nhận</button>
                </div>
            </div>
        </div>
    </div>
    <!-- End Modal Crop hình -->
}

@code {

    #region Initialization

    [Inject] IJSRuntime JS { get; set; }
    [Inject] private IImageService _image { get; set; }
    [Inject] private IUserService _userApi { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }

    RegisterRequestClient _userRequest = new();
    ViewElement _element = new();

    IBrowserFile _valueImage = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

    }

    #endregion

    #region Xử Lý Dữ Liệu

    /// <summary>
    /// Hiển thị image preview và lấy dữ liệu image
    /// </summary>
    /// <param name="e"></param>
    private async void InputImage(InputFileChangeEventArgs e)
    {
        _element.CropOn = false;
        StateHasChanged();
        if (e == null) {
            //await JS.InvokeVoidAsync("Click", "#close-ask-modal");
            return;
        }
        _element.CropOn = true;
        StateHasChanged();
        await JS.InvokeVoidAsync("Click", "#open-crop-image");

        _valueImage = e.File;
        if (!_image.ImageIsValid(_valueImage.ContentType))
            return;
        var imageDataUrl = await _image.ImageToString(e.File);

        _element.AvatarCrop = imageDataUrl;
        //Cập nhât UI
        StateHasChanged();
        await Task.Delay(400);
        await JS.InvokeVoidAsync("Cropper", "#cropper");

    }

    private async Task CropImage()
    {
        if (_valueImage == null)
            return;
        if (!_image.ImageIsValid(_valueImage.ContentType))
            return;
        var valueCrop = await JS.InvokeAsync<ValueCrop>("GetValueCrop");

        if (valueCrop.width < 1 || valueCrop.height < 1)
            return;

        var imgBase64 = await JS.InvokeAsync<string>("cropImageToBase64", new object[]{ "#img-crop", valueCrop.x, valueCrop.y, valueCrop.width, valueCrop.height });

        //_element.Avatar = $"{image.ToBase64String(format)}";
        _element.Avatar = imgBase64;

        await JS.InvokeVoidAsync("Click", "#close-ask-modal");

        _userRequest.Avatar = (_element.Avatar, _valueImage.Name);

        StateHasChanged();
    }
    #endregion


    #region Giao Tiếp Server

    /// <summary>
    /// Cập nhật dữ liệu lên server
    /// </summary>
    private async void Update()
    {
        _element.IsSubmit = false;
        StateHasChanged();
        var (statusCode, mess, content) = await _userApi.Register(_userRequest);

        _element.Apiresult = 0;
        StateHasChanged();
        _element.Apiresult = (int)statusCode;
        if (_element.Apiresult >= 200 && _element.Apiresult < 299) {
            await Task.Delay(200);
            _navigationManager.NavigateTo($"/user");
        }
        _element.IsSubmit = true;
        StateHasChanged();
    }

    #endregion

    protected class ViewElement
    {
        public bool IsShow = false;
        public bool IsSubmit { get; set; } = true;
        public string TextButtonUpdate = "Cập Nhật";
        public bool CropOn = false;
        public string Avatar { get; set; } = "https://unsplash.it/500/500/?random";
        public string AvatarCrop { get; set; } = "https://unsplash.it/500/500/?random";
        public (int x, int y, int width, int height) AvatarCropValue { get; set; } = (0, 0, 0, 0);
        public int Apiresult { get; set; } = 0;
        public string AllGenreChoose { get; set; } = "";

    }

    protected class ValueCrop
    {
        public int x { get; set; }
        public int y { get; set; }
        public int width { get; set; }
        public int height { get; set; }
    }
}
